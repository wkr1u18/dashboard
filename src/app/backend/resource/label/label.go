package label

import (
	"bytes"
	"context"
	"encoding/json"
	"log"

	v1 "k8s.io/api/core/v1"
	v1meta "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	client "k8s.io/client-go/kubernetes"
	// 	"github.com/kubernetes/dashboard/src/app/backend/api"
	// 	"github.com/kubernetes/dashboard/src/app/backend/errors"
	// 	metricapi "github.com/kubernetes/dashboard/src/app/backend/integration/metric/api"
	// 	"github.com/kubernetes/dashboard/src/app/backend/resource/dataselect"
)

type AutoGenerated struct {
	Metadata Metadata `json:"metadata"`
}
type Labels struct {
	Name string `json:"smarter-label"`
}
type Metadata struct {
	Labels Labels `json:"labels"`
}

func createPatch(labelContents string) []byte {
	// Create struct containing label
	patch := AutoGenerated{Metadata{Labels{labelContents}}}
	return patchToBytes(patch)
}

func patchToBytes(patch AutoGenerated) []byte {
	reqBodyBytes := new(bytes.Buffer)
	//Encode the struct to JSON and return the contents of the buffer
	json.NewEncoder(reqBodyBytes).Encode(patch)
	return reqBodyBytes.Bytes()
}

func sendPatch(client client.Interface, nodeName string, patchBytesArray []byte) (*v1.Node, error) {
	return client.CoreV1().Nodes().Patch(
		context.TODO(),
		nodeName,
		types.MergePatchType,
		patchBytesArray,
		v1meta.PatchOptions{})
}

func SetNodeLabel(client client.Interface, nodeName string, labelContents string) {
	patchBytesArray := createPatch(labelContents)
	node, err := sendPatch(client, nodeName, patchBytesArray)

	if err != nil {
		log.Printf("Couldn't change label of %s node: %s\n", node.Name, err)
	}
}

func RemoveNodeLabel(client client.Interface, nodeName string) {
	patchBytesArray := patchToBytes(AutoGenerated{Metadata{Labels{}}})
	node, err := sendPatch(client, nodeName, patchBytesArray)

	if err != nil {
		log.Printf("Couldn't change label of %s node: %s\n", node.Name, err)
	}
}